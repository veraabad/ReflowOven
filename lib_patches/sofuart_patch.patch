diff --git a/main.c b/main.c
deleted file mode 100644
index 7c5804e..0000000
--- a/main.c
+++ /dev/null
@@ -1,117 +0,0 @@
-/* 
-	AVR Software-Uart Demo-Application 
-	Version 0.4, 10/2010
-	
-	by Martin Thomas, Kaiserslautern, Germany
-	<eversmith@heizung-thomas.de>
-	http://www.siwawi.arubi.uni-kl.de/avr_projects
-*/
-
-/* 
-Test environment/settings: 
-- avr-gcc 4.3.3/avr-libc 1.6.7 (WinAVR 3/2010)
-- Atmel ATmega324P @ 8MHz internal RC, ATtiny85 @ 1MHz internal RC
-- 2400bps
-*/
-
-/*
-AVR Memory Usage (-Os, no-inline small-functions, relax)
-----------------
-Device: atmega324p
-
-Program:     926 bytes (2.8% Full)
-(.text + .data + .bootloader)
-
-Data:         52 bytes (2.5% Full)
-(.data + .bss + .noinit)
-
-
-AVR Memory Usage (-Os)
-----------------
-Device: attiny85
-
-Program:     828 bytes (10.1% Full)
-(.text + .data + .bootloader)
-
-Data:         52 bytes (10.2% Full)
-(.data + .bss + .noinit)
-
-*/
-
-#define WITH_STDIO_DEMO   0 /* 1: enable, 0: disable */
-
-#include <avr/interrupt.h>
-#include <avr/pgmspace.h>
-#include "softuart.h"
-
-
-#if WITH_STDIO_DEMO
-#include <stdio.h>
-
-// interface between avr-libc stdio and software-UART
-static int my_stdio_putchar( char c, FILE *stream )
-{
-	if ( c == '\n' ) {
-		softuart_putchar( '\r' );
-	}
-	softuart_putchar( c );
-
-	return 0;
-}
-
-FILE suart_stream = FDEV_SETUP_STREAM( my_stdio_putchar, NULL, _FDEV_SETUP_WRITE );
-
-static void stdio_demo_func( void ) 
-{
-	stdout = &suart_stream;
-	printf( "This output done with printf\n" );
-	printf_P( PSTR("This output done with printf_P\n") );
-}
-#endif /* WITH_STDIO_DEMO */
-
-
-int main(void)
-{
-	char c;
-	static const char pstring[] PROGMEM = 
-		"adapted for Atmel AVR and this demo by Martin Thomas\r\n";
-	unsigned short cnt = 0;
-#if (F_CPU > 4000000UL)
-#define CNTHALLO (unsigned int)(0xFFFF)
-#else 
-#define CNTHALLO (unsigned int)(0xFFFF/3)
-#endif
-
-	softuart_init();
-	softuart_turn_rx_on(); /* redundant - on by default */
-	
-	sei();
-
-	softuart_puts_P( "\r\nSoftuart Demo-Application\r\n" );    // "implicit" PSTR
-	softuart_puts_p( PSTR("generic softuart driver code by Colin Gittins\r\n") ); // explicit PSTR
-	softuart_puts_p( pstring ); // pstring defined with PROGMEM
-	softuart_puts( "--\r\n" );  // string "from RAM"
-
-#if WITH_STDIO_DEMO
-	stdio_demo_func();
-#endif
-	
-	for (;;) {
-	
-		if ( softuart_kbhit() ) {
-			c = softuart_getchar();
-			softuart_putchar( '[' );
-			softuart_putchar( c );
-			softuart_putchar( ']' );
-		}
-
-		cnt++;
-		if (cnt == CNTHALLO) {
-			cnt = 0;
-			softuart_puts_P( " Hello " );
-		}
-		
-	}
-	
-	return 0; /* never reached */
-}
diff --git a/softuart.c b/softuart.c
deleted file mode 100644
index 4141752..0000000
--- a/softuart.c
+++ /dev/null
@@ -1,363 +0,0 @@
-// softuart.c
-// AVR-port of the generic software uart written in C
-//
-// Generic code from
-// Colin Gittins, Software Engineer, Halliburton Energy Services
-// (has been available from iar.com web-site -> application notes)
-//
-// Adapted to AVR using avr-gcc and avr-libc
-// by Martin Thomas, Kaiserslautern, Germany
-// <eversmith@heizung-thomas.de> 
-// http://www.siwawi.arubi.uni-kl.de/avr_projects
-//
-// AVR-port Version 0.4  10/2010
-//
-// ---------------------------------------------------------------------
-//
-// Remarks from Colin Gittins:
-//
-// Generic software uart written in C, requiring a timer set to 3 times
-// the baud rate, and two software read/write pins for the receive and
-// transmit functions.
-//
-// * Received characters are buffered
-// * putchar(), getchar(), kbhit() and flush_input_buffer() are available
-// * There is a facility for background processing while waiting for input
-// The baud rate can be configured by changing the BAUD_RATE macro as
-// follows:
-//
-// #define BAUD_RATE  19200.0
-//
-// The function init_uart() must be called before any comms can take place
-//
-// Interface routines required:
-// 1. get_rx_pin_status()
-//    Returns 0 or 1 dependent on whether the receive pin is high or low.
-// 2. set_tx_pin_high()
-//    Sets the transmit pin to the high state.
-// 3. set_tx_pin_low()
-//    Sets the transmit pin to the low state.
-// 4. idle()
-//    Background functions to execute while waiting for input.
-// 5. timer_set( BAUD_RATE )
-//    Sets the timer to 3 times the baud rate.
-// 6. set_timer_interrupt( timer_isr )
-//    Enables the timer interrupt.
-//
-// Functions provided:
-// 1. void flush_input_buffer( void )
-//    Clears the contents of the input buffer.
-// 2. char kbhit( void )
-//    Tests whether an input character has been received.
-// 3. char getchar( void )
-//    Reads a character from the input buffer, waiting if necessary.
-// 4. void turn_rx_on( void )
-//    Turns on the receive function.
-// 5. void turn_rx_off( void )
-//    Turns off the receive function.
-// 6. void putchar( char )
-//    Writes a character to the serial port.
-//
-// ---------------------------------------------------------------------
-
-/* 
-Remarks by Martin Thomas (avr-gcc/avr-libc):
-V0.1 (2/2005)
-- stdio.h not used
-- AVR-Timer in CTC-Mode ("manual" reload may not be accurate enough)
-- Global Interrupt Flag has to be enabled (see demo-application)
-- Interface timer_set and set_timer_interrupt not used here
-- internal_tx_buffer was defined as unsigned char - thas could not
-  work since more than 8 bits are needed, changed to unsigned short
-- some variables moved from "global scope" into ISR function-scope
-- GPIO initialisation included
-- Added functions for string-output inspired by P. Fleury's AVR UART-lib.
-V0.2 (3/2007)
-- adjusted number of RX-bits
-- adapted to avr-libc ISR-macro (replaces SIGNAL)
-- disable interrupts during timer-init
-- used unsigned char (uint8_t) where apropriate
-- removed "magic" char checking (0xc2)
-- added softuart_can_transmit()
-- Makefile based on template from WinAVR 1/2007
-- reformated
-- extended demo-application to show various methods to 
-  send a string from flash and RAM
-- demonstrate usage of avr-libc's stdio in demo-applcation
-- tested with ATmega644 @ 3,6864MHz system-clock using
-  avr-gcc 4.1.1/avr-libc 1.4.5 (WinAVR 1/2007)
-V0.3 (4/2007)
-- better configuration options in softuart.h.
-  ->should be easier to adapt to different AVRs
-- tested with ATtiny85 @ 1MHz (internal RC) with 2400bps
-- AVR-Studio Project-File
-V0.4 (10/2010)
-- added options for ATmega164P, ATmega32P, ATmega64P
-- changed some variable-types from char to unsigned char
-- changed some comparisons from <= to ==
-- small optimization in ISR for RX with temporary variable
-- minor modifications in comments and formating
-- added compiler options -fno-inline-small-functions, -Wl,--relax
-- renamed flag_tx_ready to flag_tx_busy
-- replaced softuart_can_transmit() by softuart_transmit_busy()
-- tested with ATmega324PV @ 1MHz internal RC and 2400bps
-  (options for ATtiny25/45/85 still available)
-- added 3BSD license
-- removed redundant zero-init in declaration of qin and qout
-*/
-
-/* Copyright (c) 2003, Colin Gittins
-   Copyright (c) 2005, 2007, 2010, Martin Thomas
-   All rights reserved.
-
-   Redistribution and use in source and binary forms, with or without
-   modification, are permitted provided that the following conditions are met:
-
-   * Redistributions of source code must retain the above copyright
-     notice, this list of conditions and the following disclaimer.
-
-   * Redistributions in binary form must reproduce the above copyright
-     notice, this list of conditions and the following disclaimer in
-     the documentation and/or other materials provided with the
-     distribution.
-
-   * Neither the name of the copyright holders nor the names of
-     contributors may be used to endorse or promote products derived
-     from this software without specific prior written permission.
-
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-  POSSIBILITY OF SUCH DAMAGE. */
-
-
-#include <avr/io.h>
-#include <avr/interrupt.h>
-#include <avr/pgmspace.h>
-
-#include "softuart.h"
-
-#define SU_TRUE    1
-#define SU_FALSE   0
-
-// startbit and stopbit parsed internally (see ISR)
-#define RX_NUM_OF_BITS (8)
-volatile static char           inbuf[SOFTUART_IN_BUF_SIZE];
-volatile static unsigned char  qin;
-static unsigned char           qout;
-volatile static unsigned char  flag_rx_off;
-volatile static unsigned char  flag_rx_ready;
-
-// 1 Startbit, 8 Databits, 1 Stopbit = 10 Bits/Frame
-#define TX_NUM_OF_BITS (10)
-volatile static unsigned char  flag_tx_busy;
-volatile static unsigned char  timer_tx_ctr;
-volatile static unsigned char  bits_left_in_tx;
-volatile static unsigned short internal_tx_buffer; /* ! mt: was type uchar - this was wrong */
-
-#define set_tx_pin_high()      ( SOFTUART_TXPORT |=  ( 1 << SOFTUART_TXBIT ) )
-#define set_tx_pin_low()       ( SOFTUART_TXPORT &= ~( 1 << SOFTUART_TXBIT ) )
-#define get_rx_pin_status()    ( SOFTUART_RXPIN  &   ( 1 << SOFTUART_RXBIT ) )
-
-ISR(SOFTUART_T_COMP_LABEL)
-{
-	static unsigned char flag_rx_waiting_for_stop_bit = SU_FALSE;
-	static unsigned char rx_mask;
-	
-	static unsigned char timer_rx_ctr;
-	static unsigned char bits_left_in_rx;
-	static unsigned char internal_rx_buffer;
-	
-	unsigned char start_bit, flag_in;
-	unsigned char tmp;
-	
-	// Transmitter Section
-	if ( flag_tx_busy == SU_TRUE ) {
-		tmp = timer_tx_ctr;
-		if ( --tmp == 0 ) { // if ( --timer_tx_ctr <= 0 )
-			if ( internal_tx_buffer & 0x01 ) {
-				set_tx_pin_high();
-			}
-			else {
-				set_tx_pin_low();
-			}
-			internal_tx_buffer >>= 1;
-			tmp = 3; // timer_tx_ctr = 3;
-			if ( --bits_left_in_tx == 0 ) {
-				flag_tx_busy = SU_FALSE;
-			}
-		}
-		timer_tx_ctr = tmp;
-	}
-
-	// Receiver Section
-	if ( flag_rx_off == SU_FALSE ) {
-		if ( flag_rx_waiting_for_stop_bit ) {
-			if ( --timer_rx_ctr == 0 ) {
-				flag_rx_waiting_for_stop_bit = SU_FALSE;
-				flag_rx_ready = SU_FALSE;
-				inbuf[qin] = internal_rx_buffer;
-				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
-					// overflow - reset inbuf-index
-					qin = 0;
-				}
-			}
-		}
-		else {  // rx_test_busy
-			if ( flag_rx_ready == SU_FALSE ) {
-				start_bit = get_rx_pin_status();
-				// test for start bit
-				if ( start_bit == 0 ) {
-					flag_rx_ready      = SU_TRUE;
-					internal_rx_buffer = 0;
-					timer_rx_ctr       = 4;
-					bits_left_in_rx    = RX_NUM_OF_BITS;
-					rx_mask            = 1;
-				}
-			}
-			else {  // rx_busy
-				tmp = timer_rx_ctr;
-				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
-					// rcv
-					tmp = 3;
-					flag_in = get_rx_pin_status();
-					if ( flag_in ) {
-						internal_rx_buffer |= rx_mask;
-					}
-					rx_mask <<= 1;
-					if ( --bits_left_in_rx == 0 ) {
-						flag_rx_waiting_for_stop_bit = SU_TRUE;
-					}
-				}
-				timer_rx_ctr = tmp;
-			}
-		}
-	}
-}
-
-static void io_init(void)
-{
-	// TX-Pin as output
-	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
-	// RX-Pin as input
-	SOFTUART_RXDDR &= ~( 1 << SOFTUART_RXBIT );
-}
-
-static void timer_init(void)
-{
-	unsigned char sreg_tmp;
-	
-	sreg_tmp = SREG;
-	cli();
-	
-	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
-
-	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
-	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
-
-	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
-
-	SOFTUART_T_CNT_REG = 0; /* reset counter */
-	
-	SREG = sreg_tmp;
-}
-
-void softuart_init( void )
-{
-	flag_tx_busy  = SU_FALSE;
-	flag_rx_ready = SU_FALSE;
-	flag_rx_off   = SU_FALSE;
-	
-	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
-
-	io_init();
-	timer_init();
-}
-
-static void idle(void)
-{
-	// timeout handling goes here 
-	// - but there is a "softuart_kbhit" in this code...
-	// add watchdog-reset here if needed
-}
-
-void softuart_turn_rx_on( void )
-{
-	flag_rx_off = SU_FALSE;
-}
-
-void softuart_turn_rx_off( void )
-{
-	flag_rx_off = SU_TRUE;
-}
-
-char softuart_getchar( void )
-{
-	char ch;
-
-	while ( qout == qin ) {
-		idle();
-	}
-	ch = inbuf[qout];
-	if ( ++qout >= SOFTUART_IN_BUF_SIZE ) {
-		qout = 0;
-	}
-	
-	return( ch );
-}
-
-unsigned char softuart_kbhit( void )
-{
-	return( qin != qout );
-}
-
-void softuart_flush_input_buffer( void )
-{
-	qin  = 0;
-	qout = 0;
-}
-	
-unsigned char softuart_transmit_busy( void ) 
-{
-	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
-}
-
-void softuart_putchar( const char ch )
-{
-	while ( flag_tx_busy == SU_TRUE ) {
-		; // wait for transmitter ready
-		  // add watchdog-reset here if needed;
-	}
-
-	// invoke_UART_transmit
-	timer_tx_ctr       = 3;
-	bits_left_in_tx    = TX_NUM_OF_BITS;
-	internal_tx_buffer = ( ch << 1 ) | 0x200;
-	flag_tx_busy       = SU_TRUE;
-}
-	
-void softuart_puts( const char *s )
-{
-	while ( *s ) {
-		softuart_putchar( *s++ );
-	}
-}
-	
-void softuart_puts_p( const char *prg_s )
-{
-	char c;
-
-	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
-		softuart_putchar(c);
-	}
-}
-
-
-
diff --git a/softuart.h b/softuart.h
deleted file mode 100644
index 4c93929..0000000
--- a/softuart.h
+++ /dev/null
@@ -1,125 +0,0 @@
-#if !defined(F_CPU)
-    #warning "F_CPU not defined in makefile - now defined in softuart.h"
-    #define F_CPU 3686400UL
-#endif
-
-#define SOFTUART_BAUD_RATE      2400
-
-#if defined (__AVR_ATtiny25__) || defined (__AVR_ATtiny45__) || defined (__AVR_ATtiny85__)
-    #define SOFTUART_RXPIN   PINB
-    #define SOFTUART_RXDDR   DDRB
-    #define SOFTUART_RXBIT   PB0
-
-    #define SOFTUART_TXPORT  PORTB
-    #define SOFTUART_TXDDR   DDRB
-    #define SOFTUART_TXBIT   PB1
-
-    #define SOFTUART_T_COMP_LABEL      TIM0_COMPA_vect
-    #define SOFTUART_T_COMP_REG        OCR0A
-    #define SOFTUART_T_CONTR_REGA      TCCR0A
-    #define SOFTUART_T_CONTR_REGB      TCCR0B
-    #define SOFTUART_T_CNT_REG         TCNT0
-    #define SOFTUART_T_INTCTL_REG      TIMSK
-
-    #define SOFTUART_CMPINT_EN_MASK    (1 << OCIE0A)
-
-    #define SOFTUART_CTC_MASKA         (1 << WGM01)
-    #define SOFTUART_CTC_MASKB         (0)
-
-    /* "A timer interrupt must be set to interrupt at three times 
-       the required baud rate." */
-    #define SOFTUART_PRESCALE (8)
-    // #define SOFTUART_PRESCALE (1)
-
-    #if (SOFTUART_PRESCALE == 8)
-        #define SOFTUART_PRESC_MASKA         (0)
-        #define SOFTUART_PRESC_MASKB         (1 << CS01)
-    #elif (SOFTUART_PRESCALE==1)
-        #define SOFTUART_PRESC_MASKA         (0)
-        #define SOFTUART_PRESC_MASKB         (1 << CS00)
-    #else 
-        #error "prescale unsupported"
-    #endif
-#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)  \
-   || defined (__AVR_ATmega644P__) || defined (__AVR_ATmega644PA__) \
-   || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328PA__) \
-   || defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
-
-    #define SOFTUART_RXPIN   PIND
-    #define SOFTUART_RXDDR   DDRD
-    #define SOFTUART_RXBIT   PD0
-
-    #define SOFTUART_TXPORT  PORTD
-    #define SOFTUART_TXDDR   DDRD
-    #define SOFTUART_TXBIT   PD1
-
-    #define SOFTUART_T_COMP_LABEL      TIMER0_COMPA_vect
-    #define SOFTUART_T_COMP_REG        OCR0A
-    #define SOFTUART_T_CONTR_REGA      TCCR0A
-    #define SOFTUART_T_CONTR_REGB      TCCR0B
-    #define SOFTUART_T_CNT_REG         TCNT0
-    #define SOFTUART_T_INTCTL_REG      TIMSK0
-    #define SOFTUART_CMPINT_EN_MASK    (1 << OCIE0A)
-    #define SOFTUART_CTC_MASKA         (1 << WGM01)
-    #define SOFTUART_CTC_MASKB         (0)
-
-    /* "A timer interrupt must be set to interrupt at three times 
-       the required baud rate." */
-    #define SOFTUART_PRESCALE (8)
-    // #define SOFTUART_PRESCALE (1)
-
-    #if (SOFTUART_PRESCALE == 8)
-        #define SOFTUART_PRESC_MASKA         (0)
-        #define SOFTUART_PRESC_MASKB         (1 << CS01)
-    #elif (SOFTUART_PRESCALE==1)
-        #define SOFTUART_PRESC_MASKA         (0)
-        #define SOFTUART_PRESC_MASKB         (1 << CS00)
-    #else 
-        #error "prescale unsupported"
-    #endif
-#else
-    #error "no defintions available for this AVR"
-#endif
-
-#define SOFTUART_TIMERTOP ( F_CPU/SOFTUART_PRESCALE/SOFTUART_BAUD_RATE/3 - 1)
-
-#if (SOFTUART_TIMERTOP > 0xff)
-    #warning "Check SOFTUART_TIMERTOP: increase prescaler, lower F_CPU or use a 16 bit timer"
-#endif
-
-#define SOFTUART_IN_BUF_SIZE     32
-
-// Init the Software Uart
-void softuart_init(void);
-
-// Clears the contents of the input buffer.
-void softuart_flush_input_buffer( void );
-
-// Tests whether an input character has been received.
-unsigned char softuart_kbhit( void );
-
-// Reads a character from the input buffer, waiting if necessary.
-char softuart_getchar( void );
-
-// To check if transmitter is busy
-unsigned char softuart_transmit_busy( void );
-
-// Writes a character to the serial port.
-void softuart_putchar( const char );
-
-// Turns on the receive function.
-void softuart_turn_rx_on( void );
-
-// Turns off the receive function.
-void softuart_turn_rx_off( void );
-
-// Write a NULL-terminated string from RAM to the serial port
-void softuart_puts( const char *s );
-
-// Write a NULL-terminated string from program-space (flash) 
-// to the serial port. example: softuart_puts_p(PSTR("test"))
-void softuart_puts_p( const char *prg_s );
-
-// Helper-Macro - "automatically" inserts PSTR
-// when used: include avr/pgmspace.h before this include-file
-#define softuart_puts_P(s___) softuart_puts_p(PSTR(s___))
